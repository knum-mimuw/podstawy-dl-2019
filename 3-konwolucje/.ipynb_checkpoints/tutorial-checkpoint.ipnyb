{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of cifar10_tutorial.ipynb","version":"0.3.2","provenance":[{"file_id":"https://github.com/pytorch/tutorials/blob/gh-pages/_downloads/cifar10_tutorial.ipynb","timestamp":1557695822511}]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"bGuY-P4aNil8","colab_type":"code","colab":{}},"source":["%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T5NwBuG5NimD","colab_type":"text"},"source":["\n","Training a Classifier\n","=====================\n","\n","This is it. You have seen how to define neural networks, compute loss and make\n","updates to the weights of the network.\n","\n","Now you might be thinking,\n","\n","What about data?\n","----------------\n","\n","Generally, when you have to deal with image, text, audio or video data,\n","you can use standard python packages that load data into a numpy array.\n","Then you can convert this array into a ``torch.*Tensor``.\n","\n","-  For images, packages such as Pillow, OpenCV are useful\n","-  For audio, packages such as scipy and librosa\n","-  For text, either raw Python or Cython based loading, or NLTK and\n","   SpaCy are useful\n","\n","Specifically for vision, we have created a package called\n","``torchvision``, that has data loaders for common datasets such as\n","Imagenet, CIFAR10, MNIST, etc. and data transformers for images, viz.,\n","``torchvision.datasets`` and ``torch.utils.data.DataLoader``.\n","\n","This provides a huge convenience and avoids writing boilerplate code.\n","\n","For this tutorial, we will use the CIFAR10 dataset.\n","It has the classes: ‘airplane’, ‘automobile’, ‘bird’, ‘cat’, ‘deer’,\n","‘dog’, ‘frog’, ‘horse’, ‘ship’, ‘truck’. The images in CIFAR-10 are of\n","size 3x32x32, i.e. 3-channel color images of 32x32 pixels in size.\n","\n",".. figure:: /_static/img/cifar10.png\n","   :alt: cifar10\n","\n","   cifar10\n","\n","\n","Training an image classifier\n","----------------------------\n","\n","We will do the following steps in order:\n","\n","1. Load and normalizing the CIFAR10 training and test datasets using\n","   ``torchvision``\n","2. Define a Convolution Neural Network\n","3. Define a loss function\n","4. Train the network on the training data\n","5. Test the network on the test data\n","\n","1. Loading and normalizing CIFAR10\n","^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","\n","Using ``torchvision``, it’s extremely easy to load CIFAR10.\n","\n"]},{"cell_type":"code","metadata":{"id":"7WOnNoqcNimE","colab_type":"code","colab":{}},"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tcCu1acMNimJ","colab_type":"text"},"source":["The output of torchvision datasets are PILImage images of range [0, 1].\n","We transform them to Tensors of normalized range [-1, 1].\n","\n"]},{"cell_type":"code","metadata":{"id":"R3PCiqfDNimK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"56ec1ae3-0394-46e8-8248-47438157139c","executionInfo":{"status":"ok","timestamp":1557693380305,"user_tz":-120,"elapsed":19411,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["transform = transforms.Compose(\n","    [transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n","                                        download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n","                                          shuffle=True, num_workers=2)\n","\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n","                                       download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=4,\n","                                         shuffle=False, num_workers=2)\n","\n","classes = ('plane', 'car', 'bird', 'cat',\n","           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["\r0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"],"name":"stdout"},{"output_type":"stream","text":["100%|█████████▉| 169877504/170498071 [00:14<00:00, 8979638.05it/s]"],"name":"stderr"},{"output_type":"stream","text":["Files already downloaded and verified\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IdPSFWhmNimO","colab_type":"text"},"source":["Let us show some of the training images, for fun.\n","\n"]},{"cell_type":"code","metadata":{"id":"AT35zAJcNimP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":156},"outputId":"24118f49-b9f1-4b24-db9f-2786c3428d97","executionInfo":{"status":"ok","timestamp":1557693680727,"user_tz":-120,"elapsed":1265,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# functions to show an image\n","\n","\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = dataiter.next()\n","\n","# show images\n","imshow(torchvision.utils.make_grid(images))\n","# print labels\n","print(' '.join('%5s' % classes[labels[j]] for j in range(4)))"],"execution_count":4,"outputs":[{"output_type":"stream","text":[" bird  bird  frog  bird\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nBqJLAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"2yg-cKV_NimS","colab_type":"text"},"source":["2. Define a Convolution Neural Network\n","^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","Copy the neural network from the Neural Networks section before and modify it to\n","take 3-channel images (instead of 1-channel images as it was defined).\n","\n"]},{"cell_type":"code","metadata":{"id":"e9oz8GWcNimT","colab_type":"code","colab":{}},"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super(Net, self).__init__()\n","        self.conv1 = nn.Conv2d(3, 6, 5)\n","        self.pool = nn.MaxPool2d(2, 2)\n","        self.conv2 = nn.Conv2d(6, 16, 5)\n","        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n","        self.fc2 = nn.Linear(120, 84)\n","        self.fc3 = nn.Linear(84, 10)\n","\n","    def forward(self, x):\n","        x = self.pool(F.relu(self.conv1(x)))\n","        x = self.pool(F.relu(self.conv2(x)))\n","        x = x.view(-1, 16 * 5 * 5)\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","net = Net()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NuW4fLWLNimW","colab_type":"text"},"source":["3. Define a Loss function and optimizer\n","^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","Let's use a Classification Cross-Entropy loss and SGD with momentum.\n","\n"]},{"cell_type":"code","metadata":{"id":"b4o2vPfmNimX","colab_type":"code","colab":{}},"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UIw-0r2nNima","colab_type":"text"},"source":["4. Train the network\n","^^^^^^^^^^^^^^^^^^^^\n","\n","This is when things start to get interesting.\n","We simply have to loop over our data iterator, and feed the inputs to the\n","network and optimize.\n","\n"]},{"cell_type":"code","metadata":{"id":"-NbiN0UFNimb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"83b3c00b-b2af-42dc-fc00-490ab84bed8c","executionInfo":{"status":"ok","timestamp":1557693950270,"user_tz":-120,"elapsed":151235,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["for epoch in range(2):  # loop over the dataset multiple times\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = net(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","\n","print('Finished Training')"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[1,  2000] loss: 2.219\n","[1,  4000] loss: 1.862\n","[1,  6000] loss: 1.666\n","[1,  8000] loss: 1.588\n","[1, 10000] loss: 1.537\n","[1, 12000] loss: 1.490\n","[2,  2000] loss: 1.440\n","[2,  4000] loss: 1.396\n","[2,  6000] loss: 1.357\n","[2,  8000] loss: 1.361\n","[2, 10000] loss: 1.321\n","[2, 12000] loss: 1.299\n","Finished Training\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dnWrifswNimd","colab_type":"text"},"source":["5. Test the network on the test data\n","^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","\n","We have trained the network for 2 passes over the training dataset.\n","But we need to check if the network has learnt anything at all.\n","\n","We will check this by predicting the class label that the neural network\n","outputs, and checking it against the ground-truth. If the prediction is\n","correct, we add the sample to the list of correct predictions.\n","\n","Okay, first step. Let us display an image from the test set to get familiar.\n","\n"]},{"cell_type":"code","metadata":{"id":"zcAfSG1NNime","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":156},"outputId":"27fa4244-74b7-49e0-a6f6-c7c19dd837d8","executionInfo":{"status":"ok","timestamp":1557694258157,"user_tz":-120,"elapsed":1624,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["dataiter = iter(testloader)\n","images, labels = dataiter.next()\n","\n","# print images\n","imshow(torchvision.utils.make_grid(images))\n","print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))"],"execution_count":8,"outputs":[{"output_type":"stream","text":["GroundTruth:    cat  ship  ship plane\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXQAAAB6CAYAAACvHqiXAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztfWmQJVl13ncz8+2vXu1dXdXd08t0\n9+wwA8MAEkIIJHtAEihsAiMrpLGNYyIcIiw5FGEj64dMhH9IYYdkOULGMSEQSFYIYUACIywDA2KR\nNDA9K8z09DK9Vnd1Vdde9faXef3jnJvnvFp6qruarq7ifhEdlX0zX+a9N29mnnO+sxhrLTw8PDw8\ntj+Cre6Ah4eHh8fNgX+he3h4eOwQ+Be6h4eHxw6Bf6F7eHh47BD4F7qHh4fHDoF/oXt4eHjsEPgX\nuoeHh8cOwaZe6MaYR40xJ4wxp40xH7lZnfLw8PDwuH6YGw0sMsaEAE4C+BkA4wCeBvCL1tqXb173\nPDw8PDw2imgTv30EwGlr7RkAMMZ8GsD7AKz7Qi8Wi7avr28Tl/Tw8PD40cPExMS0tXb4tY7bzAt9\nD4CL6v/jAN58rR/09fXh8ccf38QlPTw8PH708NGPfvT8Ro77oZOixpjHjTHHjDHHarXaD/tyHh4e\nHj+y2MwL/RKAfer/e7mtC9baJ6y1D1trHy4Wi5u4nIeHh4fHtbCZF/rTAI4YYw4aY7IAPgjgizen\nWx4eHh4e14sbtqFbazvGmA8D+H8AQgCfsNa+dL3n2b/wBQCAsUnals1Qt0wg35tWqwkA6MRtOiab\nTffFCf3WJuKxY4IYABCEqs/tEu0D7ctkG+m+EO6aco446QAA2h3pW5IYvkDE/THpvibvkxYg4XEZ\nI62tFo0hjqNVYw+4b61E2qrUDdRacdpWuvcxaHz4wx9Otzudzqpr3gxc9/nsir+6KdBt1Bq4Ru14\nZdz8Jep4N89ykmt5a63Vb3f8xz72sVX79v8kz23cSdtmrl4BADQbsmYO3XkYANDXWwEAZELpTzZD\nCy+r23g9R0atsU4dAFAuZfgc0teIt0O1iOfmZgEAPT09aVsmk+Hz0nEmkHN0khYAIFhDdAuMNNaq\nZA6NIlqT+Xw+3ddq0Tk6/AwCQCFf4GtJ3/7g93636/x79+1Kt8tDR+l3oTy3lZ4yAGCpKeu6ujjD\n/aX7najFEPEgClEubcuH/ApTz236AHJTnMj5XVui2tw13Njp+jyXa6wdw/fPBPq9EK9xHP02l6P+\nZgPpNyxtm6zMX23mOADgG0/9YNW5NorNkKKw1n4ZwJc3cw4PDw8Pj5uDTb3QbwZaLGVZW5dGlk5z\nKKVNAehLFkUseWuJg7+6JiONTSdVJPIFjFgCDLkpUucwCUnN6IgU4qTlRJ2jZUhyiUP6wrb0vjjg\nc8nX2rCUn1d9i1gyCiLqeNxuq450eEhyDieRhuH6FrIwDNfdd7NwoxK/no9UjlJSZOJEKstjsLLP\naUwGIg3JWTYvoa+FcpHubWDl8WhWqS1pCbGfz9J5SwU6LlKXcWsnpxZZIcv3XY2lGbvjaF1l1Tpx\nUxRFcm+d5B8oKd/NTY61Vr1MqrU2X1PgtFsLOW/AF8uwlOqkfgBoN5s8PjUWljpxjTWRWJHyO2E/\nnSsjz3QckoQeZJSEXl+mvsVV7oecr2npuLaSjBs8v0poR6tNWlTAz0S9Ju8W95zo8TmNOQjkObRO\ns+HJ1BaBTifmY+Saxrj3k6yZ/n4ac67Qw+eXe5a4dZ2TfsTLZWwWPvTfw8PDY4fAv9A9PDw8dgi2\n3ORi2SQBK6YOy2SUiUUlTNqkAoUFNmsotdVZGzQxkWWVqmNFpUnaYddxTnUCAGNXEHMADBM4NhTV\nsR6TbndlhtSzakvUqOVlagutnLcnz+SYIvUqRSKUCjkaZxK00n1Bal6RsbsRtJP1zQTahPDDqhO7\nkfN2mTfc8V26qdulTUQ05802zUek9eyYfhuata6drNG2MVxrLBGbvQJl9sqGdK1MIG25gM1pbp8i\nNJt1Ms2EoSLwIrrv7aYQqwHYxNahNmvkkYzZtJTNFOR4Nw9qjTlyOGazoY73mLl6FQAwMtQvx7N5\nJczKtUK+lptnZflBxMc3FUnsCNt2W9pWIrCyL+b+xuo5iA2NOd8j/RjcP0K/XZgDAJRry+m+VoPe\nEXFZnseklyLPe7Iy9+66AdtlW015vpwDRT4v9yWdUrUm3Dp2fwNl4+3wmBO9/Pjy2UjWbqHAxDGc\n2VBMOokz52qZ+iY4MXgJ3cPDw2OHYMsl9ChmyTyUr2PAkkYuVF9/xzjxlzLQzA//tKMlWEfyZEW6\n2X3gLgDA4vw0AGB6RiSZTETSeAD5crc6ND11KwFRx8+TxGNzgwCAdigkT4slh+WF2bTt0iRLGnkl\neU3MAwDu2E3XHOzRUpxzZZSxO+Ejtqtdoxy0ZHwz3BVvipSf9ltpD+za2VHiTZs1pVNnzgAARnaL\nu1vC5PbwgEiYeSaSkk308VpzlGUpPOmIZBeydJVRhFyG24KY1lE2o6S+kF1jlfaVCejeJkZpZAm7\n4zaYHFXrqcFjLxZlDYeOKdXiIc9DlV0qn3nm2XRXmzWF/sqb0rZcjp0D1BSkrrOsvQbKXdBY5xwg\na9ImjhhcX0LvQFwrA9BaT0JFCLOWFiptrcTsZqXI9/jZp9N9rWmS1kfvv0v6dpWeuaaReSvzwJbq\nRKzm1VhyrLEHg0JABkyK6ldKs0jnjdqsubRlspZKdF9yCwtpW7TvXgBAra83bUtY64r5nuUTIVZT\ni0AsbWG8efnaS+geHh4eOwT+he7h4eGxQ7DlJhenl5tI0uo6dbijIyiZgGqxGpxVZFMcO/VPmST4\nHNqv980//TMAgGf+/h8AAJfZ9AIA1Y6L/BRV7Pz4FADg7LikqMn1jwIA9o4cpGvmRK1ssbqYKUuW\ny06D1MSZqctpW7GfzDXjyxR92FDq80gPqYTFjKihcZvUZh0Mt5IOXIsUvRWRotc2zTD5llFRvexj\nXl8WEnx+gVTjyWkyVRV6RH0e5IhIHdXoSEAdPbpGZ1f0YuPIsnnPqnNk3OTH0u8Qjryntozy6247\ndTuRc4QVmgdjVdwB+zsnLho5lnW9vEimuXJRSMCA51tHbUYcWT3PZOjsopgSC+yn3VKWkVabrhVl\n9ZqhtpgjsTvK3OSitLPKx9rymk3i9c2AeuadCTFQY487PFZl6zBsEmkYuu+ZRNaCGSJTXG1J+tY+\ne5L6a8QslfB0VZ1/u3q+sm2OH7moSHmeD+1o0WDzadjguZJLormb+li/IqbVHkPPvOkdkvHxdduB\nI5pV7AXPd6hI9ijYvJnTS+geHh4eOwRbLqE3A/oSL9RUBBlLN/1lESsqTDJFLKFowip1O1IEjSNN\na7W5tO3rX6K8MZPzJHFMLsv37PwlOu78ZUnxHuZJWo/DStpWqtCXOFOkfVFeJIMcS5H5QMYy3aIo\ntdG9d6RtDSZrzpwhCX12XuWU2UPnPTAsmkKGXfeMchsT+YzHq77+Nrk+mTQNzFxDQNBSebCGhB6z\nFJawNKKjWV0E3tWZxbRtsUpjrev8HTUaTZAj8rlal3tbLrJEqvrm5P2NKiDXq6nkjHOxk/l2ZOia\nLocJRyYql8OINcpIMY+hofmwsb57PD52BIiVa9vyEs3bBX3NyEVWizS5r0Lz5lwUX3jxxXTf6+67\nDwCQaJfKmOY3r116WVOo11gDjuT8HdYQw0icA9qcL6jZXD8ldqyk94TXsNUyJDsxtLR7I1+3d4nn\nangk3VfYtZ/6Y4WMBLte2qHdaVM9w7lZrlBeGCgX4Co/r3ZkMG3LJNSnhtLwS6wltpZofE2dY6fA\nEblVuS/RIGkPJqPcMjlfSw//NFQaQMfQ3JtAuehi89HeXkL38PDw2CHwL3QPDw+PHYItN7lcrZOa\nMdsWUvSbf/e3AIB7j4rp4qfuI7Khn/3VNRnjkvAESn2JmXxRXBrOnic/59k6qUK2OJDuC8tMvg2I\neaDA9U9bKmVqi4m4Sj/1rVKWPk5dIRPK4pwiS1glzBfENHNhjsjYTIXUyakJqS5VvrIEANhdkeML\nLlVvosi0FajWdHIzVjmVqulSC4cq0ZPbdulAVU4sBMnqb72LYtW2jmU2BzhytKCIswZH1E0ok8vU\nHG0nijBrsz2ltkQE8tS0zN/4pQkAwL1HDqVtdx7YS/1XfvkpOesifbWVxXVbhylcgyoN2eSXtMWc\nELCJr74gYwGbGywndQoLMvYs36usmm/TJlNbrM0UHA1tUiJWzE3VKpkWJifl+FKlzNdUicl4zlvL\ndFxe+cNfnSdi9dkfiBmmlKNrHj4kcxqx6adZo/VXiFQiqSatrVilkY7do9ZQ87ESaopdCtukK1aE\n96lnOcPmrtzpU3T6Z76d7uu8iU1VKg2t5RiR7JI8Gw3QPJQ53iPMyfFJic5vrCLqOTlez6C8gzKX\n2FyzTGsyMyLOD7hI+6KKmEUbV2l+w6K0JUfJN73Bib0CReJnOzQ5kbIl2mtw/BuFl9A9PDw8dghe\nU0I3xnwCwM8BmLLW3s9tAwD+AsABAOcAfMBaO7feOa7ZgV6SEmoz8m1pZ4l4nK2p5O8tciOqZNnN\nSxEpTiINQyFtGi2ScK8q/ml6ib7OxT4iRPqHhaisJiRpDEFF5TGB0sqI1NSokgTTWKbj9ytypcbS\n+FRLpGXD0tLCrJLKWFqp89c/zEq/JxdpGicWRCvYP8QayDW+4PN1GWi5SFpDoPJKuGIdXYK3I2tc\nEG5X2to1vvVruENemSCXzoEB0nYKeZF8mg0aczEnbbuHSdOySnyr1misJZZkWg2V7pQHvdyU8XXS\nPBvKjS51n3T7Vg2zS2K8lrdl3hUwUAc5CT2ntIIyk8+9TGYF7H4JADm+x3ktkLIWFTRkLaRFD7hQ\nSmtR1lpPifb1D4gmeXactMAzF6+kbSdPPwkAmJsmiXS5IeeotanmTATlhsiS/wN3HU3b3vuzjwIA\n9vB6buZlnI1qlX8n16xwAXpTX8J6yISy/lz6a0eOApJCNlJyZXmOrtUZJzffitI2li7T9Vt5ica0\noPeCuTKVtpXGmNCssOYJeZYK7C6bnZd+N5iI7kxPpG1ZnsPOIs1VblYcI9p11qYKouHMnyVnimxB\nJPSeUSJxXSooq1wUm44MV2u4lWxeRN+IhP5JAI+uaPsIgCettUcAPMn/9/Dw8PDYQrymhG6t/ZYx\n5sCK5vcBeAdvfwrA3wL4DzfSgbte9wgAYPypE2lbuZe+/o+89c1pWzEkO3OLJWQtfRrORhdbyffR\ns4vqVz//4ik5bx9Jh3v2kyuXVba4DEvhSXMmbWu1klXXCvmL+tILLwAAKipBfbFEkkFJ2dEuX5kE\n0J1nJmSpY4DdzebnxP43N0vbZyfENWtshFyyoqyKbliBqCKaQszSdVvX32PbZPoXYtd0wSpaIrVr\n+DA6AV55SKYBLi7fB5TraB+7frXb6lwstRXLYpN0ErrhYDGjXMRyBefepcqqMTHSZXNc1Te5Zqb7\nEN69voh+8dw57rfM99Iirbu4LZrCpUuknczxGqguiz151yBJ1eWSBAWFXJylpTIURpxrKOBcQlUl\nvTfcYFShjQuXiX85Oy48Q7VFv833sutcSSbGrcRSVmS3ifMUjHP58mTa9u1v/x0A4B7mKob7RCKt\nL5Pk78rDAUD7HsqnsrywvmKey8rYrZPWE6Uys4YTKDfbZQ4EXH749QCASvTGdF9tie5BW+V9Mjme\nG1WeMVOg61bZPVO727Y5X0pGPRt1nhvtNFhnu35tma5ZKshYGnx8rizP+UAPvXti9a5Y5rULdqMs\ntFXGRu6T9jBu34T8STdqQx+x1jr95AqAkWsd7OHh4eHxw8emSVFLxst1Py3GmMeNMceMMcd0nmYP\nDw8Pj5uLG3VbnDTGjFprJ4wxowCm1jvQWvsEgCcAYGxsbNWLv9hLpoL9h4SgqbMF4o6Dh9O2IVbb\n58+eAwC0dXRZh0wXj7z9F9K2Ow49DAA4+MC5tO2Z58hM0l8mE8blKcnlErEbU04XV+DeLleF7Jqf\nJbVzoJzRh1A/2KwyNCy5XFzRhuk5MaEYjqbsYZfHKFTECKvcr14cT9uG+0ktP7JXuU6twCf+5H/J\n+bkfGaX+lXtIZTx8UIjgN72O3Kpc2UurzEKOZLTavuJy7CiziiPssjk6vyY7s1kyoQz2K/dJVxtW\n1WhMc4Rk6ByNjpx/nknieZWqdGmBTABt7arJROYgu54dOSyEVcZFE+rC8EGXAaYL3/77p3i4qsCK\nI7LrshbOXSHiLq39qcSj/l4yWZQUSZzj4zLKlTFil7qAa4rWFKEZ8Tmsylt0ZZaI9LZit4s9zt2O\n8x0tK3dLvh+NhvS70kPnfcsbH0jbqpzyucEuuhcuiCnl1VdfpbErF7vzMzT39ZqcN8oJuQ8ApZI4\nGHR4HtqxvmdcaEaRgYZNUIURIj4XqzKWqws0dqPccVtcMzWrycV5+o3LBZXLynOwyGs8n1GvPpfW\nWEWKNjl6GVwzeKEua9Kl0SmqaNqevWTiDbUZMK2Hy/dK17Jwbw61KJOb4Ld4oxL6FwE8xtuPAfjC\npnvi4eHh4bEpbMRt8c9BBOiQMWYcwG8D+B0AnzHGfAjAeQAfuNEOhDkiFi5PHk/bHnwjJeMv9coX\nP1wiAipmKSFS5bPOXCTi4m39B+XERQo+6SmpKu0RXavAboL5rCoVzl/nPWOjadPLLJlkFbmzyMTM\nwX2kURy9+9503+wsF7OoSIDCZXanMoqE6esnqXaBpU+d/6RQpN/Wl6Tfpy5wsIcitkYkdQUdX1PB\nT3XazqggnyUWcIuqLb7nbgBAwzJ5pCT0HEtKWqp1hSp0FsLeAdJGUuJJuTs6N6xQSeMu0kvLIglL\nK+c48OvSlCh8szOkEdXrItnFTZZEVc4Xl1Nk7z6ic+7YtzfdV0rXiiZ915fQnz9F/SgWRCOyrBE2\nO3JfejlrpiP/WkoKvrpM9yBUc9WTJ42sEwsJbpgEDNm3zUQSqJarkmTZagvZOjvryFBdLo3+tjhH\nzFJV5qrF7qz7hsX1cbCfFo8LXAKA2TnKAzPYR/14+PX3pfvG2TV1oS5r+JVxui+BWtcHVzBpkcp0\nWuihZ25ZlZSLWKWJVZbBiINvAl6TiXK3NFzwJlLXdFvtlsowyVp2xJK31ogcGRorLdCVtuuoVZkp\nMGkZr87a6nK/ZDpKU2CPAZ2xMR+7DJ18LbXkXGBdtxfx5rOjbsTL5RfX2fWuTV/dw8PDw+OmwUeK\nenh4eOwQbHkul0yeCJpGQ6vPXL9RRVAWS45kIlOArjdajkhl+uQTH0/bfv6ffZjOoaLbslxL0RXL\nOHhoT7pvapYIrsayqM27d5Hfui4Y0OQ6j4cOE2F752Ehcxeeo1qO1SVRKx2p01ERcnU2ifRx/cHY\nStRabz+pix1VkSAMaHzjl8UUMfI6dOED/+SfSh+ZLCyp/DGOhCkoU5VLLbG4yPlVOmIKyDBJFyn/\nW8uqa135Z9uEzueqomsiNuLjMxkdgbrabOP8bxuc/6SkcmT0cz6duCV9y4c0rvkZMRmMXzoHADjM\nRHoYKNOSdRXtVYrha7j8LrJZz2rikWMLCqHMx959d1L/XZrgK7LWptlUNDIi9VFzQ2QGqs6LP3fC\nkbC9/WSvyOUklqLBQ651xOSS5+cgbssaC5lcdEVfMllVaCNP24+8QUwoR/eP0flbstbPvkrjevXE\nywCAt75JCNN9++j4Cy9KzqF27HIqrV9TNKv6keWauokVM2eBSfCOSlO8xJGyMROf+V4xFY2U2ASm\nyEO3rrW5IoSrmUp/dWGOtWD52dQml5h93V2a4kBdM+sMPSpRVJPfKTp3VMQmxxicP0YXXeHnRtd1\n1abXG4WX0D08PDx2CLZcQjccQVZTknGDJcyMzuMwwy5FnK8lg/l032gffTFPHZeo0Mvjp2mjJqXf\nzo+fAwA8tJuiU/fsF2ZxbIokpOppkUIGciQd9vRJWalXXz1L1xwj6X5+UaSnNn/pJ68qCcyRJco1\nscYSuuHcDpoKKbnsjYlEfmYNzUdr+grWQ9IWCSKVUNT+cpbOW8jLnNY5U16tTf04d+acXJNJ0TsO\n7k/bzl6kufzS3zyZtrU5w2We87UU1flddF1vRaIO+3pJynroIVExhodIKr1zL81poNwFnZTliCtA\nyK76LpHexkbpXo3tIVJbZ/CrsWtbl8ZyDVEmw0T98K6xtC3PhPT0tLiTVjlq2YX7NVQEaO8wra09\nyvW2p5fGWRkSqX2GifSYJba2qujmXCRrikhstR3hKRpL1mX0zNE9zljRoHbx3A/3yz3IM8E33C8s\nZoVd+2YuXAAAnH/1XLpv9wCt/4XJp9K2DJPhrXD9V0ikcpeEnEUyr/K7zE8RwTu7LDlUrk7Q/Pb3\n0Pq//17RFDKsnTcVIdxmDUET+m79u6IvgSLqnZSsSyfGKRGrWcvu3EA6kyvSc8gzF/Hxeu2632Sc\n5qQfdD59oFww42u40m4UXkL38PDw2CHwL3QPDw+PHYItN7mkqW+V+jI6ROqWVt+//iL5hPdzkv0j\nA6IC5XNMCkXii3116hydvikRb3fcSX7qIZ+3WBECamiECKuZWVFvF5gM1YXNd+0idTlic1BDkZcu\n6VJdmQc6/OOOOkmjyak5O/Q9HVQquOFag1kjY8kxaRTb7kg8jb/6P19JtxNO2B8oH94yE8w9yvxx\n4AiNeXiQTAyDoxJFOsB9yqvkUvPHyRz1/eNSd7VuXTEN+n+k1OEK//bwHWK2eesjb6BrlcTHu8Rq\nu9N4W2pOO+xbXVsQE1ub/bgLRelbXx+ZGyY5Gdq0KpJR4IjFkd0yz8WiikFYgX42sYXKnNDkQh5G\nyUCzM9SnxUVOg6xMhCFHGJ6/JAmwKotkLuntlTgF53/eZKcAowjCnItmLMl9L1gXWapzAdMzUSqw\nOdKKOWbvIM1LURGU1UXqd0eZclzxj4NsIjr+ypl039GjlIgLigC9fJl80/P9YvYC9HY3CeiKrSTK\n/LHEMR1Xr4opcX6Oznvyxe8BAF554R/SfYcPU8zHgcP3pG39Q2w2UuYKlyraFTvRhoww9WFXfUsL\nvUibq5ErhXQU6crHa149jaxeg21PSdeu5Hd8VnW/9bvkRuEldA8PD48dgi2X0F0UV29ZCKu+Hto2\nKmfIoiVJY3qOvpRDPdL1EhM6cSCSybnL5wAAI/2SDH8/f+GdO9j3npHo1EsTJMn3lEVqz7Bb1Uun\nL6geu0hH+ttUX9VljtDrUwUJOix2TkyqBPw91KeIXaOKRZHAXP4TtIVYjavUt5Fd6+dyefq5H6Tb\nhQwRlM2mELZZJvXe/JY3pW3nL5GkPcOc1P33iWtblgnNWlOk/AxrNm94gxCaDY5EzLI0eeSQROve\nxylWx4ZEIq0U6d4myk314hWKUpya4+Ie01fTfVUmy+fnRUJvcQrbjHLBdLlkXCRxWxGUxT6at/sh\n4+vtXX8unaRdU5GooXEl/EQriDkVa8QRyIkV+Sibo/MPDUnkcZnXeF65gvZyvyO+Z9qd07JrYEe5\nk/ayS2egoisTThMbuejKpkjevZxAxnZEa4xZ62mpSMc6348ir83zV2T9vfwqaX/NpkSgths0vzbU\n1Pv6cFJtPi9jv/suilQ+fI+4D9eWSFp/6VlyAX7umBCx3/4WaYjHX5a1fvSeBwEAR+4Sqb2vn9ab\nI4vDrj66+V0j97ImW13JvM7qso8uejRWJGqSuk+uj6701MaVzZQ1rFNs3yi8hO7h4eGxQ+Bf6B4e\nHh47BFtucnHRe7t3iU+4qzGYKHJxdC+p8sfYlDJvJEWtDUkt7x0S4rG3wj6geVGtD7DJpcwpe//4\nE3+a7qvxtRbrQqbV2A9YZ9rczZGcjVlS/6o5fU0yC71yQvzhJyfJfLCookf7+uiElRKpz6EisTIc\nvRfWLqVtwyXa35sXhU4lIQUAXL2o/OcHyGy0d6+QgPe+7gidPyfneOl5Ip5GWA0uq2pGU1xfsVQR\nk9VghY5776NvT9sCduju7aXjhgbFf36WUw2fPS/zsTBPZqDFBYmOXWLyeZ7TFM8uSgRohwnejEpr\nnOUKQYGKrOut0Lj6OLK0X5mncmzSyhbEtLVcF9J5JQbZh1z79pe5+kyi0r9mApqPXeyvblSUbJZ9\npp0pCADyHC0Zqjy7zsSSVmlSJhfng1+rytpxEYs5tSgtm19qCzTfl87JfM+y83NfQY4f4RTD+byu\nwcsmlIjMTVFRyPOrXN9z36g8cz1czWuxuT6Rl6i0uC6Jlw10G/UtVL7pfYOUhvZt76C1e/iwmPC+\n882/BQCcPSvPRvU5fm4XxST3wOuo2tG+fXQunZ467tAaj1XfEjbtdlXpSuvnur+yy9Xb1QS5s5Zo\nn3dHkKbX6iJF+R2nzDbahHOj8BK6h4eHxw7BlkvojgSs9IuE3ompW7lI3MCOcmGGY8+Q5LWYkQi8\nxJC0N7JHvvQvHyd3px/7yX+Ztv0DFy6oVklKbLekwMXUFeeKJ9+4Za4BGKmovP6AJPg9BTrHwlWR\nhjohScYju4RYjdnVq64kwkadJNIqk2+dRCSwdoMi5XZlRBIcK5Mk1exI20oJ/dLJl9LtRSbOfv4f\n/Zu07dFHKTnm174u7o27mCzcVeQoUuUKl+fouZFekdR6eDuv3AU7LNU4SVTnrLlygiSpC1Piutfi\nQiVRXtLE9vQQibyLJcZ2azURlVFFClzOC537oqeHxlKp9PA+VaeS8+lMTsr9bjTWr55VZOm0rYjb\nArtg9lVE60nSVM5EaBZUndSU9FLSYWK5TctRrriI+6vIug7f704sfV2coTHoBzfDEvryAmmDE5cl\nOnpkgMbSV5Jo5xpL14nSFDp8RkfE7uGCDQBwF9cZffBeKRpy8gw9L899XxwLVkKnjA64AEUQidad\nYaeAWEVXuvSzAZPER44KAZ+wm+/ExOfStrlpGuuppmh1k5eoPvGdR4h0vec+OceuESKpI/Vu6bS5\n+IZKqRtzjVx3H9csiNKVU2b1/jRFM8+DPkVaTEaJ/l3RqDcIL6F7eHh47BBspMDFPgB/AioEbQE8\nYa39A2PMAIC/AHAAwDkAH7Av2Ih9AAAgAElEQVTWrl8CfB243CX9QyJBdPhr3gikMEK+zJIGZyi8\ncFGCEd72JnJHayzLF7PYQ26CE5ck98bpk1TtvOOqgStvpirbbXsGxc1sYYEko96ySKR3HaXcEk+/\n8AoA4NnjZ6UfP/UeAN1ZIs+cJgl+XmVsdC6PjTpJ5vtHRLIrcBDJwIBIxjYiyaHTWt+tqaFKgT3w\neurjO9/1zrRtsI9s2z/+ZmX/ZsmuhzWFSlmk5pCLNriq9IDYanXRgYU5sttWWOJJVAaZQ3fdDwDY\ntVcyUs7OkWbT0yeujC5zn7GrK7I7O6wrjQYAy2xTtqpkmCuccHGCbP9OCwKANhf/0PldiqX1A4uq\nrE31qAIXLshoSuXpWeRgp4SzMh52ATgA+jj/SZjR0idtay2mxfXMasydNJrS706L5sqoghi2SceX\nlMbS10caTiFLNu7IyDrpY+2ut0fWZIvPUVPZJFuc4TTgQJd+pZkVOUvpuOJpWLjGfXcdSduuKndT\nOpfmA9hervqW5d2JfhBZcnU25pbS1vbuOwAAOHDgQNr29CTd744qj3d1ap77Q9L78eMvpvtc4NSd\nd0q/R0bIbbKnR/gicIBfo8U2d/XsZVgj00FEzm1RxxVZo10jaVTp6dOCGILwJhS42IiE3gHwG9ba\newG8BcCvGmPuBfARAE9aa48AeJL/7+Hh4eGxRXjNF7q1dsJa+yxvLwE4DmAPgPcB+BQf9ikAv7D2\nGTw8PDw8bgWuixQ1xhwA8BCA7wIYsda6vJdXQCaZ60bCNRp7B6SoQbVOak4tFhXFEWCuVuTJl5Qr\nXI1Um3JJcpFw7QGcPylq4iUmi976Vkqfq9OS9nA63IExcZO6MEtmlXpTJbcvkXpbGSbS6KEeqV15\nldXxc+efl7HUyDwxvyDX2jVMqnGvpf7sL4ur364KF4UwYkJxKVNLSoUVpz/CobsfTLc/+Cv/msYX\ni1p+4jQRk4lROXCYPG2z+jc7r5LWJC6PjdCvrrB6AiG2lhapJ+EkqcaXVT1QV6gkaQjZVGIC9swp\nMYWd5ZStzu1vYEjmw5kHFhaE9JqZJmLQKhNKwO5wJnB5TVTkMROweZ06eHklrSzIsYvkzLSM5dU5\nuqaLsgSAvn4iv0dHaem3VFRhu0Vmm8RKHxfZLFZX5qCYIzhDNmfp2pXOrJIvyVgK7K7YUGs3YSKx\nVGY3WLVOshwlqQlkRzA3FAlo+DhHSrZVEZPxGbKk1lQNUkcq7h6V9b8SoTI5pNvqmjA8X13ufO43\nZtU+F2Xa0yPmoJSs7Cpe4kx4dK2lObmPz3EK6pdeeDptGxik+7h7txDBu0cP8DXJDDOoTLHDXNDX\nKOLd3eeOMgN2mDRN3Ra16yObu6wyv9lkpYnm+rFhUtQYUwbwOQC/bq1d1PsszeCaBl5jzOPGmGPG\nmGO12vqeBR4eHh4em8OGJHRDKQA/B+DPrLWf5+ZJY8yotXbCGDMKYGqt31prnwDwBACMjY2teukv\ncSKRgspUl2aeS1S5NCZThgZIejsZSDa4qVmSfGZC+cL1lukrevf9QnScOUeSoCsioInKI0eIJDly\n8M607fwESSQvvfT9tG1mmoNUuAhCv3JVG3+JJPqJafneGSZ2QxXgNLqP3L/28xf7jh6RwPJcyqrZ\n0IEPJFFpt6qVeP8v/fN0u383SU0v/ECkYEcutZQUEDNJ50qtaVLGlfaKtQTBbUGXGMC5UzgL5vSM\nuCg6tzsVS4K+Sh/3RyTd2RnWRlhKnJ4WArTJ2klHuX3GXAYwVLlcinma55xzadQV2V3yHoj0VFBZ\nJFdinoney5fE/a/EZPXdquCCy0hZ5Pw0jbpoVXNz5N7abss4a5xrpajcPnsrtO5LOfpbUGRnxFJn\nrEjRTqfF51XZO135s7QYgyqawFpuWz15UcikXqJcaTmb5MxV0kSmZ8TF02VFnFP5dJymlesRbWol\njNUSOv3VRKFhqVbnOEklbf7rCEgAqC9TP65ckYIYly/T9kJRjsvwOnIkf0nljylGdJwmyC9xUY1T\n5+SdUq9TEZdOTOcaGpZiJw88QAGKRw6LRD88TGuh0ivOHbkCaRIWfH317HXSJI6KmL4VpKihnJIf\nB3DcWvt7atcXATzG248B+MKme+Ph4eHhccPYiIT+4wB+GcD3jTHOOPwfAfwOgM8YYz4E4DyAD/xw\nuujh4eHhsRG85gvdWvsdrJ8V8l2b7cCZ06Tm3HFE0l/mA04D2hLiKmK1SYgRIVHLXLTh7rvFD/hr\nX/kyAKC2IP7qxUEir06Pk3Vo314hUQ/eRYUXckqNP3QH7Z+fFff6l7luacKEy/ickEeLTOY2YjEf\nLc6TWWeXIlzOz1DbwD4yP8zklE90wiSqMq/YiGspJqK+r/Sifu75Y+n2i9+n766BmHJcvoxIF2FI\nU8Fm+BhR1SNOt6vTnbp8KlnV34D91ENL+ypZiZIN2CzVDpV5gCNnldswspxrpV1j/+iqmKxaTBqa\ntooeZZtPS5HmMUeDVpfo+KK6j8O91I9ImTqcZWMtanRgmNZJvyo84go0RGo+lpaJmFxepv7mcmIu\ncaSiTr86NkJkeC4v5gFHhlrOJ1JtSI8aTDjPz0l+oZlZ8vWuK/POPZymOMO+/d0FHbjeqVpPTa6F\nOp5GR4sPeYvNWbWqnH9hnkyPWRX16sb+5Ne/nra9/c0PoQuqeEPi/Ms7KkKTTTLKHR4mNQfRvlBF\nzr7w7DMAgOU58XcfZP/6ixPSVmEf+iw/N4mKsK6U2R9exQdkIy4MklNxGAGbcefIzHTurERiz8/R\nvD17TOXu4biNffskmnaMC8aMjtGzPzYi75sSp+k2BVXvNFg/NmKj8JGiHh4eHjsEW57L5fnTJC3f\ncf8jaVsC+joaTQLyF36RCZr5eSFtBgfIZe89j/5U2vbg6ymPw2c+/5dpm+G8DL1cfX3PmLhclZms\nCzsimQzspukZPShS1gIXJ3j2eZKCJ5aVu1SGCNjeUSGKhg5TW1dhBHYTPMFFO05fEQk2y+xRXUVG\nVnkaOolIFe8W4REA8O1vfjXdrnHmuWxGlS4rOlJWbnloOX+Hq5Ke0RI69SOfU4Qtu/1lVZa+qERj\nzWdpnDmVj8KlCjEqS6Qjt9uqcEaDCc9UqtURdny8Lm2XhvgqibivRNu9JRpTuSBScC5D58sYuY9G\nuR+uRJtJOu3mGLFLZdxF9Lnyezx/SjTOsxRer8o465xhsq58Tp0mFGScG5us+RPHXwYAnD93Lm1z\nUc5WuUOOjZIDwABnvKwrbzK3PT8nhOYMk751pQG7nEPOE21+UbSkgOe+GMnacflirlwRDXilhN5W\nRTUcKW86cg4Xlaqd9SyozZGoy8syWa6Yyl1HRZt/w4MPAwCeeVGKXjz1NGURnefiKHFH7sGuUSI3\n3/a2t6VtEd/nc+fFxfmppygX1P33UhR6pVecKyZ5zJOT4gDg1u7uEXFvPHjwAF2fHQuqS+L26RwM\nMpFoBY01chhdL7yE7uHh4bFD4F/oHh4eHjsEW25yOblAKv10rFKPZkgFD1pKRUlcDT76OzYqNoef\n+DEiNPMZUUMP7qfIz599/wfTts/+5V/Tta7QeScWRNlrNE4DALIQlXe2Ttunz4taCVaL7DCZdPpH\nxPyQ1hVU0ZgJmycSIyYAl4xqgSM58xmVhIxT2FaNSi7FZKRNtErWrZ6NDEv03ESdCKI4FjW7wnVO\nI9W3xWkie5cWq9wvUU0Tpy6vFb2mzCqZAt0Hm6Hru8RqABCwzaWokpW5yvRxe7U5DZwEymTFdpFn\ncrOgzB8DPaSm7lMxAHtHyf/X8Z7NhqjqgaX1FKnIvr4Krbua5NpKcfIkpYS9775707YCm1D0dARM\nPyYcHTipomRdsrdmXZk12IQYK7PKocMHAADDu6j/uvBChs08fSpRliNUdZlM50P+yglKG7usCmK4\nfTqGIWGTUnVJ5qjG/axxNGtLmcRcMY0Lk0I8uhqv8TXqYNquCFDrNlK4KE8VxIrEEal8qwqq3u5P\nvONdvEt+4IpXHH1QTLb3v5Hq5rqyq4GiiV0BlkOHJN4k4jk9cETS7I7dQURzgSOOe5XJxY3LFXAB\nxKyya1jSgLtkXyGbqgLF/sbs4NBWdrrErD+XG4WX0D08PDx2CLZcQj8xT9+UL3xHojEf3E/Syu6s\nEAZFlhJGd9MXcHRIpJY7DzG5aUWqmOC8Kp/49F+nbc88TySTi0TtCry0jpSSc8Q5ukasiT52Beww\nwdoJFGnoZlOVkmq0+LzqSxwxQRqyNGZVrpMOU0QZ9TV3pcha7fUjyWxbJPreEkkcS4pYbccktd19\nz/3ymzGSVqY4OnBKRQcuc14Xna7BSZY2lvOWIpJC7n49pSW9rErLXV0kDaDeEomxzoUldFRqjl0p\nS6yJ9KncJcNcwX10TCSfw3vIrXBXTsTUZXZ1nGW3vjAr81csEQleVhG5g5y/4/JZIcIc2izdN5ZF\nwwkcGalETFe8ImbXxFOnTqb7lhYcMS2PmCsCEinxOuGQwYAjbaFcMQdZq9Jka41TLtfrMqcXL453\nHaeCD2HZxbPWknvmpOvqtGjAGe6nK/nXUZGUVXZb7ChXSYm0XF+qrCvtJGQXzMiqCF5+XjsqgrfD\n8+DOr8vYOYG/ozQcVw6upXKojN3B+ZgSTlGbqCIS/JyfvSCuoPWWywOkCqb0Huy6/tyCXDNiibtU\nOSCDdfmQFmTMlydn+RzU8ZxKB+4CYE1Z1kdjbv2yiBuFl9A9PDw8dgj8C93Dw8Njh2DLTS7LrIZ8\n7VlRV0++StGj736jkFJ3jpFqf/YMRWq+/U1iOsizqr7UEnXuM39D6TGffVkSLNVclBqbPAKVqtSp\nRYGKbnNmklipc002hbRZJTTKt7nJEZeaDIqi1fUvi5xIKAtXgTzdhZhJRZ0Uq8MEYrZHqvyszIU2\nc1kSccVtUt3qSh2uXaTEZAOqwvowp5XNcJWcgsqiVQ9dBRZtl1qtZtfqZKZ5O1eNuu8eSV514QKZ\nM2bmJdK26cg2RaZFTHQXmMUaUgRoX6nEV5Z7cGWaxnJiWpI0GSa2KrvIjFSoCGFaZBJVp+UtK5Jr\nJQp8z1rKrOHI6q46mc7/nM0VlYpEL+fZp79cElIv5HEVVbSpM3GceoUSuy3MiilggSM6Y+Vznsly\nxKpaTznW3w3PX01Fm04xcVdrijof8hj6e2U9tdg8V2Mn+Y5K/pWk5hWd/5Xnw6wvE37rW9+QsXSo\nalApkvmIed21lVnFEfMuIZl+ltps2tLPoyMcG01pi9MKWJyKWtUPHegjc265rCtm0Rg0v2vS8bmE\nZyqik8ccKBNKxEm/ArP6ODeErvAKw++PohwfNNhcqAjv64WX0D08PDx2CLZcQh8covwWs3PyeZzg\nqLa/57qdABC39/MWfQmHd0uUpwnpC/y9YxIt9tdfp0ivZiISAfhLHQSrv2MxS45WfaadO5qWElyU\nZ4YlA6M/p5yHQpNerhalzj0T8vVDyxKHVZoCS/labB/dTdJkT0VJlbVuCX336EC6PX5hnMekiwnQ\n9tmTJ9KmBXYndFevKrfIKktDSdzFHNPxqphAq0kS3bPf+QoA4B0lGef9PM56r0jLjgTUUcANJuwW\nOHpTk7PnX6FovOm6RC42MnT9wi4Zc/9ukrhyFRpTqCJFi+z2lysKyW7C9Ze+c42NO3IPXJRx0lHa\nGo/dkaIFFUkZsNZYVzlRmrOkLV7QxSl4HlwKWZcvBxDyPJNXWgFfotWS+VuaI4m80Vjmv0JkuzuV\nV2u+XecUvKr+qyMw3V9NRjr3wo7STixLtdnM+kR9XkUqt0O+Lyoldo6dDhLl6urcNgO+piahE853\no7UCFzGbWBUFzKO2rm6nUSQ0375A1cWNQk5Z3ZTI1pQg5eHpmqVt1pi11u3WjFHPxsr3TEtFvVo+\nR0O9PnIhaVNjY/txo/ASuoeHh8cOwZZL6E6azagsgJ0GSVdnJ0Uqa1Yp2OPtb6AK8oU+yZmwwMUg\nvvldyThYZ9tvW2W7y7HbmJM+1qqgFCppIf3YKttajiU740SlQB2fIymkoMqfORentgqkWWKpzQVl\nNJUk2NvPLpujkii/zP6QdRUIsvJTfMdRyeS2yC581fFpdQRn3VPuaLN83SyPuaXs5WK3Xe2W1lWQ\ngHHqRcqfcXFJJJ/hgOajS8NhqWVZ2euvWJIKT7NNdVzlAKkVWcO5QwoMjBwkCSbfJ66r6X1gqalc\nFk2hyPb0QK0xew3b7yLnCaotidvi1GVak42G9M2Vj3N5PPQ9dppeoIKZMhz45ngVQDJcRmxz1y6K\nbbYj63wwzSatnSXlHuduW6nC7rBKMrRtmufmsqx1VyRjQUmkTjJ39mmj7OWJXR1c5nLbmGT9oiuJ\nuo/LVeJRiqG+B/Q3VovZBUC12A2301GufFzIwyppXLJaynPYYRt67LRBda9dUJUWnq2lfjYbOrdN\n3HW81txtyufEqs0FFeoiMd3XDFu635w7p18XvqHtMXgJ3cPDw+NHHv6F7uHh4bFD8JomF2NMHsC3\nQDUVIgCftdb+tjHmIIBPAxgE8AyAX7ZWhWpuECnJpInBkFTHliJtJpdJLXr2BBFL76mJCrRkyRRx\naU5MEnlWuTs1OUeDVUxXAzJSUXxuX5dbmnFuT3KcDbpTzmZy4oK2zK5eLZWC15lftNnBmViqHLFa\n7hPzSj/ngmiplJ+vsEtbRrlrvXGFVlbpF4JweITyq0wok0uq/qnfNNms4upNatfA+BoRgF17+MRt\nVtmr05LvI8hxSmLlMneZr/E8RB0/HfF8lEmNL+2TIhnDY5STZ5CLTgBAjl0BW6onls0CuYir3Eea\nmHZtirS8hm/YlXPkQqursDsV3OiIX07f66q/a3U7y+YdncfG7deEY4dNDMvLXPO1qXOusMuc0S6E\ntC6yqhjDyJ4xPgdFdC7OiZtohwtWWEVCO3NKraXNMM6c4XzssOr4jBq7KzxRqykz4ApcvChOCqcm\nqB8lVSM0YltR3FWSg+bURYMmiqjPcq4f3eZMNLFObcTz7EhLo3KkOLJV27ZcPhh9X5x7bRK7KFJF\ndrKJsitnkyvgYVdHtrpftlWeqHiA1sWeB8Q1u9fd0k2kdNmIhN4E8E5r7esBPAjgUWPMWwD8LoDf\nt9YeBjAH4EM33g0PDw8Pj81iIyXoLADnZ5XhfxbAOwG4UvOfAvCfAHzsunvgyAZdOICDXxKV98Hl\nUzk7RRLBJz7z5XTfO99BSe7PXhbpsOqCBdQ3K+My1bGUUFRuR1kuXFFfEunaERdWkZYZJiidBKiJ\nMCcJJopAqbOLmm5zx/WxVD2okuJfnaHAkvlpyfA4f56CqQ4fOoj1UMiLxJbjAJaMymcSMzmmP/6d\nVHLh8emd15ASuigyloaWeXyvKKmvl8vTvdKQQgAvsfYyUxHJdXAfjWv0IEnjfcoFM8dukIHKx9Hm\ntRJGqpQbS8RRGmQjx6fStXYpuwYpGibsuqdcR1P3Qn1e1tYC6yQ2OUeTXTA7bVlPTuLWFecdHHme\nyeoSgVw2UJPKvBbzOeX+V6DfzM7QNXUWxQxrnKGuLs/aaEdLkytIva5AGlfwQ2k9y1xEpVaVfDAr\nEVhVvtBJq7FItU4b6ApOCtlt0TrXQKVpsWSs4qzSubfKNdHdCCs+iimcFK5dizt8/bZyCkj4HWRd\niUD1PKR5mVRHDFaPxTL53eEAxorKR7T3AXLuiIzc7/mTnM9qr2ij14sN2dCNMSEXiJ4C8FUArwKY\ntxJGOA5gzzq/fdwYc8wYc2wtrxIPDw8Pj5uDDb3QrbWxtfZBAHsBPALg7o1ewFr7hLX2YWvtw0WV\n29jDw8PD4+biuvzQrbXzxphvAHgrgD5jTMRS+l4Al26kA4NcqbyhChJUOZItG4o/t0ur6XyJv/m9\nF9N9Z7m+4XxVmJHZZVKbFbeIEqvvHVa7cqp6vVPV8wWVJyJwPsKi2juf2Q6bGIz2T2UVLFYV6lvs\nJ1tQ+Ttckv2BITK1tBQh3OSCDvWcXDPh6EFdEX4l2iqis8r5OHr65JqNKqnZuoBCzOphmrFVpW41\nq60CKaxKD2yZUKqyj/C3VVGS8zVqm1H5KqIRqoA+unc4bTs4TNuDvTQvgYo2rbIq21DEVsSqv675\nmeco0Iirr+cLIjzkeO51FOa1kKyRR8Qpo1aZfiyzyalJR53DRRrG2mTA60ivO7fGHEnbZfVK3HoS\nUjlm8rmVkXtb57S2ztSSaAKUc780lHbsxmW1L7Y73pkrVD8iHottCZE9N0NmtHZr/TXZUX7oMR/X\nCjQh7PL66KIo3MTPUqDugUuRm2jTCJvFEpVu2hHSzvqhj3cmM23lSZx/uDKxOTNTaprR/uVsFoIm\nbJ3ZRr0P2pzGeuAuKqax58C+dF+D65G++orEzhTabNmWIPjrxmtK6MaYYWNMH28XAPwMgOMAvgHg\n/XzYYwC+cOPd8PDw8PDYLDYioY8C+JShhAgBgM9Ya79kjHkZwKeNMf8ZwHMAPn4jHWiw1JlTn5Ym\nS0iZUKTUDn8oXcL+oCBS3DkmQwNF2nRYeuooQrPBGeWqHKmpiR8nNZWyIsUVmCgNlFThCMdCka6v\nc2pc5Ux5iXJPipgQ6a8Iabl7gLSS3buJ/JuviiSzyJkJlxckSrGPCx1MX9WRn0PQaKsq9mGWxt4/\nLNdsl2kuO22V2S5xf5kwVRK6G7KOGEylN83+OeKOsxG2VQ6VZi/1+84+IXn6Byi6s1yRpVcu0n3L\nMeHcUPlSWuzmaJV0HTp3U90P3s6wpqXdFl3xBk2w2Wuwvg129Yu0u6pzhdOujzx2V+hCr6eVkjd3\ngLqqIzl57p3bYKwiL9s8D6HSzNqcDyRW7rWlJmk2TjLXuXaadZbu1ygVl6wR8ev6Een55n7PTkr+\noDZHrOpbsAp66JzzJcjKNTMu22ncVZGDf8pzpU5nXYZCpSHmWQPprwiR7krOuYIsek5DdjHNKQ3Y\n5Wnpio7l++IiZ5cWVR4WXp5JJHO0wKkUoyHpx/6jRHz2c/T3pVdOp/umT1NG2Uj1LX+NvDgbxUa8\nXF4E8NAa7WdA9nQPDw8Pj9sAPlLUw8PDY4dgy5NzOZUwp5IYFR0x0hZV07mZJuwFrRMGJayedVqK\nxIpdCk1NbNF2kqbolO/Z3CyZOmbVNStcGKFXRWFW2Hc9DzLHuOrdABCxShiqWpdNTubkCiTo4zo1\nrtVYU0mM5md47MLm5jkisXGN6MZQqWt9g2QOKpeUH3qTTVDK5NKJnW+68z1Wicb4Wx90pQNlM4JK\nLhWxCl1kE0dPj4pg5CIC5ZyQ2yX2Tc/mRF1t8eYy+83XFcHriNu8Um+zofPZFrU5WGHO0Pe9xaRX\nNqtIrMz6c+mifwNl1sg4U582l3Df3Ax1FW1PIwdV8qp4NTHtIqVdoYtWS+57nU0tcV1FdDIpWlJm\nqUIvqfQdHme7IecI1rCJpP74miB34SBsiiqpGI0q14ZdXBQzoLNY6TWzEmFHzTHX7UxUhLAF9TeE\nShnM2xJVqwhNY7v+AkDCyfdqkSTyk2hvl/5azTdHczfa0je31k2XL3vaST6TCkXl62vCu8KpnIeP\nSqxIwO+qE09/l645JSbTkO+fLlSylgnseuEldA8PD48dAmNvwldhoxgbG7OPP/74Lbueh4eHx07A\nRz/60WestQ+/1nFeQvfw8PDYIfAvdA8PD48dAv9C9/Dw8Ngh8C90Dw8Pjx2CW0qKGmOuAqgCmH6t\nY29zDGF7j2G79x/Y/mPY7v0Htv8YtlP/91trh1/roFv6QgcAY8yxjbC1tzO2+xi2e/+B7T+G7d5/\nYPuPYbv3fy14k4uHh4fHDoF/oXt4eHjsEGzFC/2JLbjmzcZ2H8N27z+w/cew3fsPbP8xbPf+r8It\nt6F7eHh4ePxw4E0uHh4eHjsEt/SFbox51Bhzwhhz2hjzkVt57RuBMWafMeYbxpiXjTEvGWN+jdsH\njDFfNcac4r/9W93Xa4GLfD9njPkS//+gMea7fB/+whiTfa1zbCWMMX3GmM8aY14xxhw3xrx1G96D\nf8dr6AfGmD83xuRv5/tgjPmEMWbKGPMD1bbmnBvCf+dxvGiMecPW9Vywzhj+C6+jF40xf+mqsfG+\n3+QxnDDG/OOt6fXmcMte6Fzx6A8BvBvAvQB+0Rhz7626/g2iA+A3rLX3AngLgF/lPn8EwJPW2iMA\nnuT/3874NVDZQIffBfD71trDAOYAfGhLerVx/AGAv7HW3g3g9aCxbJt7YIzZA+DfAnjYWns/qJbP\nB3F734dPAnh0Rdt6c/5uAEf43+MAPnaL+vha+CRWj+GrAO631r4OwEkAvwkA/Fx/EMB9/Jv/Ybry\n6W4P3EoJ/REAp621Z6y1LQCfBvC+W3j964a1dsJa+yxvL4FeJHtA/f4UH/YpAL+wNT18bRhj9gL4\nWQB/xP83AN4J4LN8yO3e/14AbweXOLTWtqy189hG94ARASgYYyIARQATuI3vg7X2WwBmVzSvN+fv\nA/AnlvAUqID86K3p6fpYawzW2q9YSVL/FKQk8/sAfNpa27TWngVwGtuwItutfKHvAXBR/X+c27YF\njDEHQKX4vgtgxFo7wbuuABhZ52e3A/4bgH8PwGX5HwQwrxb17X4fDgK4CuCP2Wz0R8aYErbRPbDW\nXgLwXwFcAL3IFwA8g+11H4D153y7Ptv/CsD/5e3tOoYueFJ0AzDGlAF8DsCvW2sX9T5LbkK3pauQ\nMebnAExZa5/Z6r5sAhGANwD4mLX2IVDqiC7zyu18DwCAbc3vA32cxgCUsNoUsK1wu8/5a8EY81sg\nk+qfbXVfbiZu5Qv9EoB96v97ue22hjEmA3qZ/5m19vPcPOlUSv47td7vtxg/DuC9xphzIBPXO0H2\n6D5W/YHb/z6MAxi31n6X//9Z0At+u9wDAPhpAGettVettW0Anwfdm+10H4D153xbPdvGmH8B4OcA\n/JIVv+1tNYb1cCtf6F5pGKAAAAF3SURBVE8DOMLMfhZEQHzxFl7/usH25o8DOG6t/T2164sAHuPt\nxwB84Vb3bSOw1v6mtXavtfYAaL6/bq39JQDfAPB+Puy27T8AWGuvALhojLmLm94F4GVsk3vAuADg\nLcaYIq8pN4Ztcx8Y6835FwH8Cnu7vAXAgjLN3FYwxjwKMkG+11pbU7u+COCDxpicMeYgiOD93lb0\ncVOw1t6yfwDeA2KWXwXwW7fy2jfY37eB1MoXATzP/94DskM/CeAUgK8BGNjqvm5gLO8A8CXePgRa\nrKcB/G8Aua3u32v0/UEAx/g+/BWA/u12DwB8FMArAH4A4E8B5G7n+wDgz0H2/jZIS/rQenMOKqn8\nh/xcfx/kzXO7juE0yFbunuf/qY7/LR7DCQDv3ur+38g/Hynq4eHhsUPgSVEPDw+PHQL/Qvfw8PDY\nIfAvdA8PD48dAv9C9/Dw8Ngh8C90Dw8Pjx0C/0L38PDw2CHwL3QPDw+PHQL/Qvfw8PDYIfj/168W\nu0MvjO8AAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"wnA-t3lMNimg","colab_type":"text"},"source":["Okay, now let us see what the neural network thinks these examples above are:\n","\n"]},{"cell_type":"code","metadata":{"id":"rZlV5K5PNimg","colab_type":"code","colab":{}},"source":["outputs = net(images)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FeDKKLwmNimi","colab_type":"text"},"source":["The outputs are energies for the 10 classes.\n","Higher the energy for a class, the more the network\n","thinks that the image is of the particular class.\n","So, let's get the index of the highest energy:\n","\n"]},{"cell_type":"code","metadata":{"id":"AlyZGTLMNimj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"1e20fa89-af1e-4177-cc24-3fc1bed71ca9","executionInfo":{"status":"ok","timestamp":1557694307449,"user_tz":-120,"elapsed":630,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["_, predicted = torch.max(outputs, 1)\n","\n","print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]\n","                              for j in range(4)))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Predicted:   frog  ship   car plane\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"eIkcPqSJNiml","colab_type":"text"},"source":["The results seem pretty good.\n","\n","Let us look at how the network performs on the whole dataset.\n","\n"]},{"cell_type":"code","metadata":{"id":"dmYLO0cxNimm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"6b76a276-a3b9-4ab8-9a4d-439e6320b15e","executionInfo":{"status":"ok","timestamp":1557694668817,"user_tz":-120,"elapsed":8881,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["correct = 0\n","total = 0\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 10000 test images: %d %%' % (\n","    100 * correct / total))"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Accuracy of the network on the 10000 test images: 51 %\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VANt6VvjNimn","colab_type":"text"},"source":["That looks waaay better than chance, which is 10% accuracy (randomly picking\n","a class out of 10 classes).\n","Seems like the network learnt something.\n","\n","Hmmm, what are the classes that performed well, and the classes that did\n","not perform well:\n","\n"]},{"cell_type":"code","metadata":{"id":"HfT21F6QNimo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":187},"outputId":"e85cfd26-64c3-4656-dd42-dd2ea9b89775","executionInfo":{"status":"ok","timestamp":1557694684372,"user_tz":-120,"elapsed":9347,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["class_correct = list(0. for i in range(10))\n","class_total = list(0. for i in range(10))\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs, 1)\n","        c = (predicted == labels).squeeze()\n","        for i in range(4):\n","            label = labels[i]\n","            class_correct[label] += c[i].item()\n","            class_total[label] += 1\n","\n","\n","for i in range(10):\n","    print('Accuracy of %5s : %2d %%' % (\n","        classes[i], 100 * class_correct[i] / class_total[i]))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Accuracy of plane : 63 %\n","Accuracy of   car : 87 %\n","Accuracy of  bird : 46 %\n","Accuracy of   cat : 24 %\n","Accuracy of  deer : 42 %\n","Accuracy of   dog : 38 %\n","Accuracy of  frog : 73 %\n","Accuracy of horse : 51 %\n","Accuracy of  ship : 50 %\n","Accuracy of truck : 36 %\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"f1Whb09XNimq","colab_type":"text"},"source":["Okay, so what next?\n","\n","How do we run these neural networks on the GPU?\n","\n","Training on GPU\n","----------------\n","Just like how you transfer a Tensor on to the GPU, you transfer the neural\n","net onto the GPU.\n","\n","Let's first define our device as the first visible cuda device if we have\n","CUDA available:\n","\n"]},{"cell_type":"code","metadata":{"id":"eV1lt11PNimq","colab_type":"code","colab":{}},"source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Assume that we are on a CUDA machine, then this should print a CUDA device:\n","\n","print(device)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cejmaDVxNims","colab_type":"text"},"source":["The rest of this section assumes that `device` is a CUDA device.\n","\n","Then these methods will recursively go over all modules and convert their\n","parameters and buffers to CUDA tensors:\n","\n",".. code:: python\n","\n","    net.to(device)\n","\n","\n","Remember that you will have to send the inputs and targets at every step\n","to the GPU too:\n","\n",".. code:: python\n","\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","Why dont I notice MASSIVE speedup compared to CPU? Because your network\n","is realllly small.\n","\n","**Exercise:** Try increasing the width of your network (argument 2 of\n","the first ``nn.Conv2d``, and argument 1 of the second ``nn.Conv2d`` –\n","they need to be the same number), see what kind of speedup you get.\n","\n","**Goals achieved**:\n","\n","- Understanding PyTorch's Tensor library and neural networks at a high level.\n","- Train a small neural network to classify images\n","\n","Training on multiple GPUs\n","-------------------------\n","If you want to see even more MASSIVE speedup using all of your GPUs,\n","please check out :doc:`data_parallel_tutorial`.\n","\n","Where do I go next?\n","-------------------\n","\n","-  :doc:`Train neural nets to play video games </intermediate/reinforcement_q_learning>`\n","-  `Train a state-of-the-art ResNet network on imagenet`_\n","-  `Train a face generator using Generative Adversarial Networks`_\n","-  `Train a word-level language model using Recurrent LSTM networks`_\n","-  `More examples`_\n","-  `More tutorials`_\n","-  `Discuss PyTorch on the Forums`_\n","-  `Chat with other users on Slack`_\n","\n","\n"]}]}